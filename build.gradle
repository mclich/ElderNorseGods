buildscript
{
    repositories
    {
        maven { url='https://maven.minecraftforge.net/' }
        maven { url='https://repo.spongepowered.org/repository/maven-public/' }
        maven { url='https://maven.parchmentmc.org' }
    }

    dependencies
    {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

archivesBaseName=project.mod_id
group="${project.mod_group}.${project.mod_author}.${archivesBaseName}".toString()
version=project.mod_version

java.toolchain.languageVersion=JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft
{
    if(project.parchment_enabled=="true") mappings channel: 'parchment', version: "${project.parchment_version}-${project.minecraft_version}"
    else mappings channel: 'official', version: "${project.minecraft_version}"
    //accessTransformer=file('src/main/resources/META-INF/accesstransformer.cfg')
    runs
    {
        client
        {
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'mixin.env.remapRefMap', 'true'
            arg "-mixin.config=${project.mod_id}.mixins.json".toString()
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${project.mod_id}"
            mods { "${project.mod_id}" { source sourceSets.main } }
        }

        server
        {
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'mixin.env.remapRefMap', 'true'
            arg "-mixin.config=${project.mod_id}.mixins.json".toString()
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${project.mod_id}"
            mods { "${project.mod_id}" { source sourceSets.main } }
        }

        gameTestServer
        {
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'mixin.env.remapRefMap', 'true'
            arg "-mixin.config=${project.mod_id}.mixins.json".toString()
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${project.mod_id}"
            mods { "${project.mod_id}" { source sourceSets.main } }
        }

        data
        {
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'mixin.env.remapRefMap', 'true'
            arg "-mixin.config=${project.mod_id}.mixins.json".toString()
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', "${project.mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods { "${project.mod_id}" { source sourceSets.main } }
        }
    }
}

mixin
{
    add sourceSets.main, "${project.mod_id}.refmap.json"
    config "${project.mod_id}.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

//repositories { /*mavenCentral()*/ }

dependencies
{
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    annotationProcessor "org.spongepowered:mixin:${project.mixin_version}:processor"
}

jar
{
    manifest
    {
        attributes
        ([
                "Specification-Title"     :"${project.mod_id}",
                "Specification-Vendor"    :"${project.mod_author}",
                "Specification-Version"   :"${project.mod_version}",
                "Implementation-Title"    :project.name,
                "Implementation-Version"  :project.jar.archiveVersion,
                "Implementation-Vendor"   :"${project.mod_author}",
                "Implementation-Timestamp":new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            :"${project.mod_id}.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing
{
    publications { mavenJava(MavenPublication) { artifact jar } }
    repositories { maven { url "file://${project.projectDir}/mcmodsrepo" } }
}

tasks.withType(JavaCompile).configureEach { options.encoding='UTF-8' }